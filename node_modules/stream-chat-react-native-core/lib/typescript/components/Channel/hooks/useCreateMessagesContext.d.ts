/// <reference types="react" />
import type { MessagesContextValue } from '../../../contexts/messagesContext/MessagesContext';
import type { DefaultStreamChatGenerics } from '../../../types/types';
export declare const useCreateMessagesContext: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ additionalTouchableProps, Attachment, AttachmentActions, AudioAttachment, Card, CardCover, CardFooter, CardHeader, channelId, DateHeader, deletedMessagesVisibilityType, deleteMessage, deleteReaction, disableTypingIndicator, dismissKeyboardOnMessageTouch, enableMessageGroupingByUser, FileAttachment, FileAttachmentGroup, FileAttachmentIcon, FlatList, forceAlignMessages, Gallery, getMessagesGroupStyles, Giphy, giphyVersion, handleBan, handleBlock, handleCopy, handleDelete, handleEdit, handleFlag, handleMute, handlePinMessage, handleQuotedReply, handleReaction, handleRetry, handleThreadReply, hasCreatePoll, ImageLoadingFailedIndicator, ImageLoadingIndicator, initialScrollToFirstUnreadMessage, InlineDateSeparator, InlineUnreadIndicator, isAttachmentEqual, isMessageAIGenerated, legacyImageViewerSwipeBehaviour, markdownRules, Message, messageActions, MessageAvatar, MessageBounce, MessageContent, messageContentOrder, MessageDeleted, MessageEditedTimestamp, MessageError, MessageFooter, MessageHeader, MessageList, MessagePinnedHeader, MessageReplies, MessageRepliesAvatars, MessageSimple, MessageStatus, MessageSystem, MessageText, MessageTimestamp, myMessageTheme, onLongPressMessage, onPressInMessage, onPressMessage, OverlayReactionList, PollContent, ReactionList, removeMessage, Reply, retrySendMessage, ScrollToBottomButton, selectReaction, sendReaction, setEditingState, setQuotedMessageState, shouldShowUnreadUnderlay, StreamingMessageView, supportedReactions, targetedMessage, TypingIndicator, TypingIndicatorContainer, updateMessage, UrlPreview, VideoThumbnail, }: Pick<import("../../..").MessageContextValue<StreamChatGenerics>, "isMessageAIGenerated"> & {
    Attachment: import("react").ComponentType<import("../..").AttachmentProps<StreamChatGenerics>>;
    AttachmentActions: import("react").ComponentType<import("../..").AttachmentActionsProps<StreamChatGenerics>>;
    AudioAttachment: import("react").ComponentType<import("../..").AudioAttachmentProps>;
    Card: import("react").ComponentType<import("../..").CardProps<StreamChatGenerics>>;
    DateHeader: import("react").ComponentType<import("../..").DateHeaderProps>;
    deleteMessage: (message: import("stream-chat").MessageResponse<StreamChatGenerics>) => Promise<void>;
    deleteReaction: (type: string, messageId: string) => Promise<void>;
    dismissKeyboardOnMessageTouch: boolean;
    enableMessageGroupingByUser: boolean;
    FileAttachment: import("react").ComponentType<import("../..").FileAttachmentProps<StreamChatGenerics>>;
    FileAttachmentGroup: import("react").ComponentType<import("../..").FileAttachmentGroupProps<StreamChatGenerics>>;
    FileAttachmentIcon: import("react").ComponentType<import("../..").FileIconProps>;
    FlatList: typeof import("react-native/types").FlatList;
    Gallery: import("react").ComponentType<Partial<import("../..").GalleryPropsWithContext<StreamChatGenerics>>>;
    Giphy: import("react").ComponentType<import("../..").GiphyProps<StreamChatGenerics>>;
    giphyVersion: "original" | "fixed_height" | "fixed_height_still" | "fixed_height_downsampled" | "fixed_width" | "fixed_width_still" | "fixed_width_downsampled";
    ImageLoadingFailedIndicator: import("react").ComponentType<import("react-native/types").ViewProps>;
    ImageLoadingIndicator: import("react").ComponentType<import("react-native/types").ViewProps>;
    initialScrollToFirstUnreadMessage: boolean;
    InlineDateSeparator: import("react").ComponentType<import("../..").InlineDateSeparatorProps>;
    InlineUnreadIndicator: import("react").ComponentType<{}>;
    Message: import("react").ComponentType<import("../..").MessageProps<StreamChatGenerics>>;
    MessageAvatar: import("react").ComponentType<Partial<import("../..").MessageAvatarPropsWithContext<StreamChatGenerics>>>;
    MessageBounce: import("react").ComponentType<import("../..").MessageBounceProps<StreamChatGenerics>>;
    MessageContent: import("react").ComponentType<import("../..").MessageContentProps<StreamChatGenerics>>;
    messageContentOrder: import("../../../contexts/messagesContext/MessagesContext").MessageContentType[];
    MessageDeleted: import("react").ComponentType<import("../..").MessageDeletedProps<StreamChatGenerics>>;
    MessageEditedTimestamp: import("react").ComponentType<import("../..").MessageEditedTimestampProps>;
    MessageError: import("react").ComponentType<import("../..").MessageErrorProps>;
    MessageFooter: import("react").ComponentType<import("../..").MessageFooterProps<StreamChatGenerics>>;
    MessageList: import("react").ComponentType<Partial<Pick<import("../../..").AttachmentPickerContextValue, "closePicker" | "selectedPicker" | "setSelectedPicker"> & Pick<import("../../..").ChannelContextValue<StreamChatGenerics>, "disabled" | "channel" | "loading" | "threadList" | "targetedMessage" | "EmptyStateIndicator" | "hideStickyDateHeader" | "loadChannelAroundMessage" | "LoadingIndicator" | "markRead" | "NetworkDownIndicator" | "reloadChannel" | "scrollToFirstUnreadThreshold" | "setTargetedMessage" | "StickyHeader"> & Pick<import("../../..").ChatContextValue<StreamChatGenerics>, "client"> & Pick<import("../../..").ImageGalleryContextValue<StreamChatGenerics>, "setMessages"> & Pick<import("../../..").PaginatedMessageListContextValue<StreamChatGenerics>, "hasNoMoreRecentMessagesToLoad" | "loadMore" | "loadMoreRecent"> & Pick<import("../../..").OverlayContextValue, "overlay"> & Pick<MessagesContextValue<StreamChatGenerics>, "myMessageTheme" | "DateHeader" | "FlatList" | "initialScrollToFirstUnreadMessage" | "InlineDateSeparator" | "InlineUnreadIndicator" | "Message" | "MessageSystem" | "ScrollToBottomButton" | "TypingIndicator" | "TypingIndicatorContainer" | "disableTypingIndicator" | "legacyImageViewerSwipeBehaviour" | "shouldShowUnreadUnderlay"> & Pick<import("../../..").ThreadContextValue<StreamChatGenerics>, "thread" | "loadMoreThread" | "loadMoreRecentThread" | "threadInstance"> & {
        additionalFlatListProps?: Partial<import("react-native/types").FlatListProps<import("../..").MessageType<StreamChatGenerics>>> | undefined;
        FooterComponent?: import("react").ComponentType<{}> | undefined;
        HeaderComponent?: import("react").ComponentType<{}> | undefined;
        inverted?: boolean | undefined;
        isListActive?: boolean | undefined;
        noGroupByUser?: boolean | undefined;
        onListScroll?: ((event: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeScrollEvent>) => void) | undefined;
        onThreadSelect?: ((message: import("../..").MessageType<StreamChatGenerics> | null) => void) | undefined;
        setFlatListRef?: ((ref: import("react-native/types").FlatList<import("../..").MessageType<StreamChatGenerics>> | null) => void) | undefined;
    }>>;
    MessagePinnedHeader: import("react").ComponentType<Partial<import("../..").MessagePinnedHeaderPropsWithContext<StreamChatGenerics>>>;
    MessageReplies: import("react").ComponentType<Partial<import("../..").MessageRepliesPropsWithContext<StreamChatGenerics>>>;
    MessageRepliesAvatars: import("react").ComponentType<import("../..").MessageRepliesAvatarsProps<StreamChatGenerics>>;
    MessageSimple: import("react").ComponentType<Partial<import("../..").MessageSimplePropsWithContext<StreamChatGenerics>>>;
    MessageStatus: import("react").ComponentType<Partial<import("../..").MessageStatusPropsWithContext<StreamChatGenerics>>>;
    MessageSystem: import("react").ComponentType<import("../..").MessageSystemProps<StreamChatGenerics>>;
    MessageTimestamp: import("react").ComponentType<import("../..").MessageTimestampProps>;
    OverlayReactionList: import("react").ComponentType<import("../..").OverlayReactionListProps<StreamChatGenerics>>;
    ReactionList: import("react").ComponentType<import("../..").ReactionListProps<StreamChatGenerics>>;
    removeMessage: (message: {
        id: string;
        parent_id?: string | undefined;
    }) => void;
    Reply: import("react").ComponentType<Partial<Pick<import("../../..").MessageInputContextValue<StreamChatGenerics>, "quotedMessage"> & Pick<MessagesContextValue<StreamChatGenerics>, "FileAttachmentIcon" | "MessageAvatar"> & Pick<import("../../..").TranslationContextValue, "t"> & {
        attachmentSize?: number | undefined;
        styles?: Partial<{
            container: import("react-native/types").ViewStyle;
            fileAttachmentContainer: import("react-native/types").ViewStyle;
            imageAttachment: import("react-native/types").ImageStyle;
            messageContainer: import("react-native/types").ViewStyle;
            textContainer: import("react-native/types").ViewStyle;
        }> | undefined;
    }>>;
    retrySendMessage: (message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>;
    ScrollToBottomButton: import("react").ComponentType<import("../..").ScrollToBottomButtonProps>;
    sendReaction: (type: string, messageId: string) => Promise<void>;
    setEditingState: (message?: import("../..").MessageType<StreamChatGenerics> | undefined) => void;
    setQuotedMessageState: (message: boolean | import("../..").MessageType<StreamChatGenerics>) => void;
    StreamingMessageView: import("react").ComponentType<import("../..").StreamingMessageViewProps<StreamChatGenerics>>;
    supportedReactions: import("../../..").ReactionData[];
    TypingIndicator: import("react").ComponentType<{}>;
    TypingIndicatorContainer: import("react").ComponentType<import("../..").TypingIndicatorContainerProps>;
    updateMessage: (updatedMessage: import("stream-chat").MessageResponse<StreamChatGenerics>, extraState?: {
        commands?: import("../../..").SuggestionCommand<StreamChatGenerics>[] | undefined;
        messageInput?: string | undefined;
        threadMessages?: import("stream-chat").FormatMessageResponse<StreamChatGenerics>[] | undefined;
    } | undefined) => void;
    UrlPreview: import("react").ComponentType<import("../..").CardProps<StreamChatGenerics>>;
    VideoThumbnail: import("react").ComponentType<import("../..").VideoThumbnailProps>;
    additionalTouchableProps?: Omit<import("react-native/types").TouchableOpacityProps, "style"> | undefined;
    CardCover?: import("react").ComponentType<import("../..").CardProps<StreamChatGenerics>> | undefined;
    CardFooter?: import("react").ComponentType<import("../..").CardProps<StreamChatGenerics>> | undefined;
    CardHeader?: import("react").ComponentType<import("../..").CardProps<StreamChatGenerics>> | undefined;
    deletedMessagesVisibilityType?: import("../../../contexts/messagesContext/MessagesContext").DeletedMessagesVisibilityType | undefined;
    disableTypingIndicator?: boolean | undefined;
    forceAlignMessages?: boolean | import("../../..").Alignment | undefined;
    getMessagesGroupStyles?: (<StreamChatGenerics_1 extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(params: import("../..").GetGroupStylesParams<StreamChatGenerics_1>) => {
        [key: string]: string[];
    }) | undefined;
    handleBan?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleBlock?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleCopy?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleDelete?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleEdit?: ((message: import("../..").MessageType<StreamChatGenerics>) => void) | undefined;
    handleFlag?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleMute?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handlePinMessage?: ((message: import("../..").MessageType<StreamChatGenerics>) => import("../..").MessageActionType) | null | undefined;
    handleQuotedReply?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleReaction?: ((message: import("../..").MessageType<StreamChatGenerics>, reactionType: string) => Promise<void>) | undefined;
    handleRetry?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    handleThreadReply?: ((message: import("../..").MessageType<StreamChatGenerics>) => Promise<void>) | undefined;
    hasCreatePoll?: boolean | undefined;
    isAttachmentEqual?: ((prevAttachment: import("stream-chat").Attachment<StreamChatGenerics>, nextAttachment: import("stream-chat").Attachment<StreamChatGenerics>) => boolean) | undefined;
    legacyImageViewerSwipeBehaviour?: boolean | undefined;
    markdownRules?: Partial<import("simple-markdown").DefaultRules> | undefined;
    messageActions?: ((param: import("../..").MessageActionsParams<StreamChatGenerics>) => import("../..").MessageActionType[]) | undefined;
    MessageHeader?: import("react").ComponentType<import("../..").MessageFooterProps<StreamChatGenerics>> | undefined;
    MessageText?: import("react").ComponentType<import("../..").MessageTextProps<StreamChatGenerics>> | undefined;
    myMessageTheme?: import("../../..").DeepPartial<import("../../..").Theme> | undefined;
    onLongPressMessage?: ((payload: import("../..").MessageTouchableHandlerPayload<StreamChatGenerics>) => void) | undefined;
    onPressInMessage?: ((payload: import("../..").MessageTouchableHandlerPayload<StreamChatGenerics>) => void) | undefined;
    onPressMessage?: ((payload: import("../..").MessageTouchableHandlerPayload<StreamChatGenerics>) => void) | undefined;
    PollContent?: import("react").ComponentType<import("../..").PollContentProps> | undefined;
    selectReaction?: ((message: import("../..").MessageType<StreamChatGenerics>) => (reactionType: string) => Promise<void>) | undefined;
    shouldShowUnreadUnderlay?: boolean | undefined;
    targetedMessage?: string | undefined;
} & {
    /**
     * To ensure we allow re-render, when channel is changed
     */
    channelId?: string | undefined;
}) => MessagesContextValue<StreamChatGenerics>;
//# sourceMappingURL=useCreateMessagesContext.d.ts.map