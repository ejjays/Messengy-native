var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAIState = exports.AIStates = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _contexts = require("../../../contexts");
var _useIsOnline2 = require("../../Chat/hooks/useIsOnline");
var AIStates = {
  Error: 'AI_STATE_ERROR',
  ExternalSources: 'AI_STATE_EXTERNAL_SOURCES',
  Generating: 'AI_STATE_GENERATING',
  Idle: 'AI_STATE_IDLE',
  Thinking: 'AI_STATE_THINKING'
};
exports.AIStates = AIStates;
var useAIState = function useAIState(channel) {
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  var _useIsOnline = (0, _useIsOnline2.useIsOnline)(client),
    isOnline = _useIsOnline.isOnline;
  var _useState = (0, _react.useState)(AIStates.Idle),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    aiState = _useState2[0],
    setAiState = _useState2[1];
  (0, _react.useEffect)(function () {
    if (!isOnline) {
      setAiState(AIStates.Idle);
    }
  }, [isOnline]);
  (0, _react.useEffect)(function () {
    if (!channel) {
      return;
    }
    var indicatorChangedListener = channel.on('ai_indicator.update', function (event) {
      var cid = event.cid;
      var state = event.ai_state;
      if (channel.cid === cid) {
        setAiState(state);
      }
    });
    var indicatorClearedListener = channel.on('ai_indicator.clear', function (event) {
      var cid = event.cid;
      if (channel.cid === cid) {
        setAiState(AIStates.Idle);
      }
    });
    return function () {
      indicatorChangedListener.unsubscribe();
      indicatorClearedListener.unsubscribe();
    };
  }, [channel]);
  return {
    aiState: aiState
  };
};
exports.useAIState = useAIState;
//# sourceMappingURL=useAIState.js.map